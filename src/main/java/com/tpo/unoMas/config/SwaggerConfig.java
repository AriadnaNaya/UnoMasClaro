package com.tpo.unoMas.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.servers.Server;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

/**
 * Configuraci√≥n de Swagger/OpenAPI para documentaci√≥n autom√°tica de la API
 */
@Configuration
public class SwaggerConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("üéæ UnoMas - API de Gesti√≥n de Partidos Deportivos")
                        .description("""
                                **UnoMas** es una API REST para la gesti√≥n de partidos deportivos, con flujos autom√°ticos y patrones de dise√±o avanzados.

                                ## üéØ Funcionalidades
                                - Registro y gesti√≥n de usuarios
                                - Creaci√≥n, b√∫squeda y gesti√≥n de partidos
                                - Estados autom√°ticos de partidos (State Pattern)
                                - Invitaciones autom√°ticas (Observer + Strategy)
                                - Notificaciones por email y push (Adapter)
                                - Endpoints p√∫blicos (autenticaci√≥n desactivada por defecto)

                                ## üèóÔ∏è Patrones de Dise√±o
                                | Patr√≥n      | Prop√≥sito |
                                |------------|-----------|
                                | State      | Estados autom√°ticos de partidos |
                                | Observer   | Notificaciones autom√°ticas |
                                | Strategy   | Algoritmos de emparejamiento |
                                | Adapter    | Integraci√≥n de canales de notificaci√≥n |

                                ## üöÄ Flujo Autom√°tico
                                1. Crear partido ‚Üí Invitaciones autom√°ticas a jugadores compatibles
                                2. Jugadores se unen y confirman asistencia
                                3. Estados cambian autom√°ticamente seg√∫n reglas y tiempo
                                4. Notificaciones enviadas por email/push

                                ## üåê Endpoints principales
                                - POST `/api/partidos` (crear partido)
                                - POST `/api/partidos/buscar` (buscar partidos)
                                - POST `/api/partidos/{id}/unirse` (unirse a partido)
                                - POST `/api/partidos/{id}/confirmar` (confirmar asistencia)
                                - POST `/api/partidos/{id}/cancelar` (cancelar partido)
                                - GET `/api/jugadores` (listar jugadores)
                                - POST `/api/jugadores/registro` (registrar usuario)
                                - GET `/api/configuracion/zonas` (zonas disponibles)
                                - GET `/api/configuracion/deportes` (deportes disponibles)
                                - GET `/api/configuracion/niveles` (niveles disponibles)

                                ## üìù Ejemplo de uso
                                ```json
                                {
                                  "titulo": "F√∫tbol 5 del Viernes",
                                  "fechaHora": "2024-06-15T19:00:00",
                                  "zonaId": 1,
                                  "deporteId": 1,
                                  "nivel": "INTERMEDIO",
                                  "organizadorId": 1,
                                  "duracionMinutos": 90
                                }
                                ```

                                ## üõ°Ô∏è Seguridad
                                - Autenticaci√≥n desactivada para testing/demo.
                                - Para activar JWT, modificar SecurityConfig.java.
                                """)
                        .version("1.1.0")
                        .contact(new Contact()
                                .name("Equipo UnoMas")
                                .email("soporte@unomas.com")
                                .url("https://github.com/tu-usuario/unoMas"))
                        .license(new License()
                                .name("MIT License")
                                .url("https://opensource.org/licenses/MIT")))
                .servers(List.of(
                        new Server()
                                .url("http://localhost:8080")
                                .description("üîß Servidor de Desarrollo"),
                        new Server()
                                .url("https://api.unomas.com")
                                .description("üåê Servidor de Producci√≥n")
                ));
    }
} 